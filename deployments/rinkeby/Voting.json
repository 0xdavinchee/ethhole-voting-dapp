{
  "address": "0x31C66c042A96AB04a9881f13b527bFC650E50a93",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_winnerName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voteCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_winnerAddress",
          "type": "address"
        }
      ],
      "name": "ArchivePastElection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "RegisterCandidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_registrationEndPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_votingEndPeriod",
          "type": "uint256"
        }
      ],
      "name": "StartElection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_candidateAddress",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_voteCount",
          "type": "uint256"
        }
      ],
      "name": "VoteForCandidate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroyContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiveResults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerResults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_winningCandidate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOver",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "registerCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredCandidates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationEndPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registrationEndPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingEndPeriod",
          "type": "uint256"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "voteForCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "candidateIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEndPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0ce1ffea2e1e42484d5b22aaa55ec9738f7b3540d272dba57b24ad2807b754a",
  "receipt": {
    "to": null,
    "from": "0x1590445efd34F5A43aC0E89Ae182cc4597A09499",
    "contractAddress": "0x31C66c042A96AB04a9881f13b527bFC650E50a93",
    "transactionIndex": 23,
    "gasUsed": "1355990",
    "logsBloom": "0x
    "blockHash": "0x6d0632b2c8940bd11a88d7698c4441c558e3ac05e22916fc4dfee321be755094",
    "transactionHash": "0xa0ce1ffea2e1e42484d5b22aaa55ec9738f7b3540d272dba57b24ad2807b754a",
    "logs": [],
    "blockNumber": 8681004,
    "cumulativeGasUsed": "7868260",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4d13fb29a46478730cfe5f21e9efba69",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_winnerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winnerAddress\",\"type\":\"address\"}],\"name\":\"ArchivePastElection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"RegisterCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_registrationEndPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votingEndPeriod\",\"type\":\"uint256\"}],\"name\":\"StartElection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_candidateAddress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteCount\",\"type\":\"uint256\"}],\"name\":\"VoteForCandidate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiveResults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningCandidate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredCandidates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationEndPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEndPeriod\",\"type\":\"uint256\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"candidateIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEndPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLiveResults()\":{\"details\":\"getLiveResults a view function to see the current results active election.\"},\"getWinnerResults()\":{\"details\":\"getWinnerResults a view function to see who the winner of the active election is.\"},\"registerCandidate(string)\":{\"details\":\"registerCandidate allows anyone to sign up as a candidate in an active election.\"},\"startElection(uint256,uint256)\":{\"details\":\"startElection start a new election passing in a _registrationEndPeriod and a _votingEndPeriod. This also allows starting a new election if the conditions allow it.\"},\"voteForCandidate(uint256)\":{\"details\":\"voteForCandidate allows anyone to vote for a candidate in the current active election.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Voting.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract Voting {\\n    struct Candidate {\\n        address candidateAddress;\\n        uint256 voteCount;\\n        string name;\\n    }\\n    struct Voter {\\n        bool voted;\\n        uint256 candidateIndex;\\n    }\\n\\n    uint256 public electionId;\\n    uint256 public registrationEndPeriod;\\n    uint256 public votingEndPeriod;\\n    bool public locked;\\n    address private owner;\\n\\n    Candidate[] public candidates;\\n    mapping(address => mapping(uint256 => bool)) public registeredCandidates;\\n    mapping(address => mapping(uint256 => Voter)) public voters;\\n\\n    event StartElection(\\n        uint256 indexed _electionId,\\n        uint256 _registrationEndPeriod,\\n        uint256 _votingEndPeriod\\n    );\\n    event ArchivePastElection(\\n        uint256 indexed _electionId,\\n        string _winnerName,\\n        uint256 _voteCount,\\n        address _winnerAddress\\n    );\\n    event RegisterCandidate(string _name);\\n    event VoteForCandidate(\\n        uint256 indexed _candidateAddress,\\n        uint256 _voteCount\\n    );\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No reentrancy\\\");\\n\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev startElection start a new election passing in a _registrationEndPeriod\\n     * and a _votingEndPeriod. This also allows starting a new election if the\\n     * conditions allow it.\\n     */\\n    function startElection(\\n        uint256 _registrationEndPeriod,\\n        uint256 _votingEndPeriod\\n    ) external {\\n        require(\\n            _registrationEndPeriod >= block.timestamp &&\\n                _votingEndPeriod >= _registrationEndPeriod,\\n            \\\"Registration end period must be > voting end period > registration end period.\\\"\\n        );\\n        bool hasElectionEnded =\\n            (registrationEndPeriod == 0 && votingEndPeriod == 0) ||\\n                block.timestamp > votingEndPeriod;\\n        require(\\n            hasElectionEnded,\\n            \\\"There is an active election currently, please wait until it is over.\\\"\\n        );\\n\\n        // start a new election\\n        if (registrationEndPeriod != 0 || votingEndPeriod != 0) {\\n            (string memory name, uint256 voteCount, address winnerAddress) =\\n                winningCandidateDetails();\\n            emit ArchivePastElection(\\n                electionId,\\n                name,\\n                voteCount,\\n                winnerAddress\\n            );\\n            delete candidates;\\n            electionId++;\\n        }\\n\\n        registrationEndPeriod = _registrationEndPeriod;\\n        votingEndPeriod = _votingEndPeriod;\\n\\n        emit StartElection(\\n            electionId,\\n            _registrationEndPeriod,\\n            _votingEndPeriod\\n        );\\n    }\\n\\n    /**\\n     * @dev registerCandidate allows anyone to sign up as a candidate in an\\n     * active election.\\n     */\\n    function registerCandidate(string memory _name) external {\\n        require(\\n            registrationEndPeriod != 0,\\n            \\\"There are no elections currently.\\\"\\n        );\\n        require(\\n            getKeccak(_name) != getKeccak(\\\"\\\"),\\n            \\\"Please register with a name.\\\"\\n        );\\n        require(\\n            block.timestamp < registrationEndPeriod,\\n            \\\"The registration period has ended.\\\"\\n        );\\n        require(\\n            registeredCandidates[msg.sender][electionId] == false,\\n            \\\"You have already registered for an election.\\\"\\n        );\\n        registeredCandidates[msg.sender][electionId] = true;\\n        candidates.push(Candidate(msg.sender, 0, _name));\\n\\n        emit RegisterCandidate(_name);\\n    }\\n\\n    /**\\n     * @dev voteForCandidate allows anyone to vote for a candidate in the current\\n     * active election.\\n     */\\n    function voteForCandidate(uint256 _candidateId) external noReentrancy {\\n        require(\\n            !voters[msg.sender][electionId].voted,\\n            \\\"You have already voted for a candidate.\\\"\\n        );\\n        require(\\n            candidates.length >= _candidateId + 1,\\n            \\\"This candidate doesn't exist.\\\"\\n        );\\n        require(\\n            block.timestamp > registrationEndPeriod &&\\n                block.timestamp < votingEndPeriod,\\n            \\\"Voting is not allowed now.\\\"\\n        );\\n        candidates[_candidateId].voteCount++;\\n        voters[msg.sender][electionId].voted = true;\\n        voters[msg.sender][electionId].candidateIndex = _candidateId;\\n\\n        emit VoteForCandidate(_candidateId, candidates[_candidateId].voteCount);\\n    }\\n\\n    /**\\n     * @dev getLiveResults a view function to see the current results\\n     * active election.\\n     */\\n    function getLiveResults()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory, uint256)\\n    {\\n        address[] memory addresses = new address[](candidates.length);\\n        uint256[] memory voteCounts = new uint256[](candidates.length);\\n\\n        for (uint256 i = 0; i < candidates.length; i++) {\\n            addresses[i] = candidates[i].candidateAddress;\\n            voteCounts[i] = candidates[i].voteCount;\\n        }\\n        return (addresses, voteCounts, votingEndPeriod);\\n    }\\n\\n    /**\\n     * @dev getWinnerResults a view function to see who the winner of the\\n     * active election is.\\n     */\\n    function getWinnerResults()\\n        public\\n        view\\n        returns (uint256 _winningCandidate, bool isOver)\\n    {\\n        uint256 winningCount = 0;\\n        isOver = block.timestamp > votingEndPeriod;\\n\\n        for (uint256 i = 0; i < candidates.length; i++) {\\n            if (candidates[i].voteCount > winningCount) {\\n                winningCount = candidates[i].voteCount;\\n                _winningCandidate = i;\\n            }\\n        }\\n    }\\n\\n    function destroyContract() public {\\n        require(msg.sender == owner);\\n        selfdestruct(msg.sender);\\n    }\\n\\n    /**\\n     * @dev winningCandidateDetails an internal view function to get the details of the\\n     * winning candidate.\\n     */\\n    function winningCandidateDetails()\\n        internal\\n        view\\n        returns (\\n            string memory _name,\\n            uint256 _voteCount,\\n            address _address\\n        )\\n    {\\n        (uint256 winningCandidate, ) = getWinnerResults();\\n        return (\\n            candidates[winningCandidate].name,\\n            candidates[winningCandidate].voteCount,\\n            candidates[winningCandidate].candidateAddress\\n        );\\n    }\\n\\n    function getKeccak(string memory _string) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_string));\\n    }\\n}\\n\",\"keccak256\":\"0x6c89be4523d32f4a13c96e965aba4db677a4cedda3769d5b362278ea09f1ded7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806336c8c5ee1161008c578063a8a7e56111610066578063a8a7e5611461041f578063aeb6ceaf14610483578063cf309012146104aa578063fe1762a1146104ca576100cf565b806336c8c5ee146102cb5780635c134d66146102f95780639eb88db614610364576100cf565b8063051364d4146100d4578063092a5cce146100f2578063095359ee146100fc5780630c54b4631461011a57806325bbc788146101525780633477ee2e14610200575b600080fd5b6100dc6104e8565b6040518082815260200191505060405180910390f35b6100fa6104ee565b005b610104610561565b6040518082815260200191505060405180910390f35b6101506004803603604081101561013057600080fd5b810190808035906020019092919080359060200190929190505050610567565b005b61015a6107af565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156101a757808201518184015260208101905061018c565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156101e95780820151818401526020810190506101ce565b505050509050019550505050505060405180910390f35b61022c6004803603602081101561021657600080fd5b8101908080359060200190929190505050610940565b604051808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561028e578082015181840152602081019050610273565b50505050905090810190601f1680156102bb5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6102f7600480360360208110156102e157600080fd5b8101908080359060200190929190505050610a2f565b005b6103456004803603604081101561030f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610def565b6040518083151581526020018281526020019250505060405180910390f35b61041d6004803603602081101561037a57600080fd5b810190808035906020019064010000000081111561039757600080fd5b8201836020820111156103a957600080fd5b803590602001918460018302840111640100000000831117156103cb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610e2d565b005b61046b6004803603604081101561043557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611209565b60405180821515815260200191505060405180910390f35b61048b611238565b6040518083815260200182151581526020019250505060405180910390f35b6104b26112b2565b60405180821515815260200191505060405180910390f35b6104d26112c5565b6040518082815260200191505060405180910390f35b60005481565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60015481565b4282101580156105775750818110155b6105cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e81526020018061168a604e913960600191505060405180910390fd5b6000806001541480156105e157506000600254145b806105ed575060025442115b905080610645576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260448152602001806115dc6044913960600191505060405180910390fd5b600060015414158061065a5750600060025414155b1561075a57606060008061066c6112cb565b9250925092506000547f179aafeb825f68d69526d7c06b5726fce985348b582ae8803c85c0155851516784848460405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b838110156106fb5780820151818401526020810190506106e0565b50505050905090810190601f1680156107285780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a260046000610745919061147c565b60008081548092919060010191905055505050505b82600181905550816002819055506000547f63fa1d9adf5b5952a2074d32715d99d20a12a2a73ae84a6e002b0e3b09ecd7378484604051808381526020018281526020019250505060405180910390a2505050565b6060806000606060048054905067ffffffffffffffff811180156107d257600080fd5b506040519080825280602002602001820160405280156108015781602001602082028036833780820191505090505b509050606060048054905067ffffffffffffffff8111801561082257600080fd5b506040519080825280602002602001820160405280156108515781602001602082028036833780820191505090505b50905060005b60048054905081101561092d576004818154811061087157fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106108af57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600481815481106108f657fe5b90600052602060002090600302016001015482828151811061091457fe5b6020026020010181815250508080600101915050610857565b5081816002549450945094505050909192565b6004818154811061094d57fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b5050505050905083565b600360009054906101000a900460ff1615610ab2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f207265656e7472616e63790000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600360006101000a81548160ff021916908315150217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160009054906101000a900460ff1615610b85576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806116206027913960400191505060405180910390fd5b600181016004805490501015610c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f546869732063616e64696461746520646f65736e27742065786973742e00000081525060200191505060405180910390fd5b60015442118015610c15575060025442105b610c87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74696e67206973206e6f7420616c6c6f776564206e6f772e00000000000081525060200191505060405180910390fd5b60048181548110610c9457fe5b9060005260206000209060030201600101600081548092919060010191905055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060010181905550807fd3ebd88818d034d26c5d98bcef9c7c45207130238e76e8cf0b3ba00e906851bf60048381548110610daa57fe5b9060005260206000209060030201600101546040518082815260200191505060405180910390a26000600360006101000a81548160ff02191690831515021790555050565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060010154905082565b60006001541415610e89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806116696021913960400191505060405180910390fd5b610ea160405180602001604052806000815250611401565b610eaa82611401565b1415610f1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f506c6561736520726567697374657220776974682061206e616d652e0000000081525060200191505060405180910390fd5b6001544210610f78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116476022913960400191505060405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060009054906101000a900460ff16151514611033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806116d8602c913960400191505060405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060006101000a81548160ff021916908315150217905550600460405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906111679291906114a0565b5050507f03f96888a8f491c1d99fd62fe7b58d3ca1da59a8d4ac8a41d0f081defb51f490816040518080602001828103825283818151815260200191508051906020019080838360005b838110156111cc5780820151818401526020810190506111b1565b50505050905090810190601f1680156111f95780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060006002544211915060005b6004805490508110156112ac57816004828154811061126257fe5b906000526020600020906003020160010154111561129f576004818154811061128757fe5b90600052602060002090600302016001015491508093505b8080600101915050611247565b50509091565b600360009054906101000a900460ff1681565b60025481565b606060008060006112da611238565b509050600481815481106112ea57fe5b90600052602060002090600302016002016004828154811061130857fe5b9060005260206000209060030201600101546004838154811061132757fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113ee5780601f106113c3576101008083540402835291602001916113ee565b820191906000526020600020905b8154815290600101906020018083116113d157829003601f168201915b5050505050925093509350935050909192565b6000816040516020018082805190602001908083835b6020831061143a5780518252602082019150602081019050602083039250611417565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b508054600082556003029060005260206000209081019061149d9190611520565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114e157805160ff191683800117855561150f565b8280016001018555821561150f579182015b8281111561150e5782518255916020019190600101906114f3565b5b50905061151c9190611576565b5090565b5b8082111561157257600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006115699190611593565b50600301611521565b5090565b5b8082111561158f576000816000905550600101611577565b5090565b50805460018160011615610100020316600290046000825580601f106115b957506115d8565b601f0160209004906000526020600020908101906115d79190611576565b5b5056fe546865726520697320616e2061637469766520656c656374696f6e2063757272656e746c792c20706c65617365207761697420756e74696c206974206973206f7665722e596f75206861766520616c726561647920766f74656420666f7220612063616e6469646174652e54686520726567697374726174696f6e20706572696f642068617320656e6465642e546865726520617265206e6f20656c656374696f6e732063757272656e746c792e526567697374726174696f6e20656e6420706572696f64206d757374206265203e20766f74696e6720656e6420706572696f64203e20726567697374726174696f6e20656e6420706572696f642e596f75206861766520616c7265616479207265676973746572656420666f7220616e20656c656374696f6e2ea2646970667358221220edd9bbce755d720faf852449aa8b8167a4c855a62533d129a3365493d0303b4064736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLiveResults()": {
        "details": "getLiveResults a view function to see the current results active election."
      },
      "getWinnerResults()": {
        "details": "getWinnerResults a view function to see who the winner of the active election is."
      },
      "registerCandidate(string)": {
        "details": "registerCandidate allows anyone to sign up as a candidate in an active election."
      },
      "startElection(uint256,uint256)": {
        "details": "startElection start a new election passing in a _registrationEndPeriod and a _votingEndPeriod. This also allows starting a new election if the conditions allow it."
      },
      "voteForCandidate(uint256)": {
        "details": "voteForCandidate allows anyone to vote for a candidate in the current active election."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/Voting.sol:Voting",
        "label": "electionId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17,
        "contract": "contracts/Voting.sol:Voting",
        "label": "registrationEndPeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19,
        "contract": "contracts/Voting.sol:Voting",
        "label": "votingEndPeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21,
        "contract": "contracts/Voting.sol:Voting",
        "label": "locked",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 23,
        "contract": "contracts/Voting.sol:Voting",
        "label": "owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 26,
        "contract": "contracts/Voting.sol:Voting",
        "label": "candidates",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Candidate)8_storage)dyn_storage"
      },
      {
        "astId": 32,
        "contract": "contracts/Voting.sol:Voting",
        "label": "registeredCandidates",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 38,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voter)13_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Candidate)8_storage)dyn_storage": {
        "base": "t_struct(Candidate)8_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Candidate[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voter)13_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Voting.Voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Voter)13_storage)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Voter)13_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)13_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)8_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Candidate",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/Voting.sol:Voting",
            "label": "candidateAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7,
            "contract": "contracts/Voting.sol:Voting",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Voter)13_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12,
            "contract": "contracts/Voting.sol:Voting",
            "label": "candidateIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}