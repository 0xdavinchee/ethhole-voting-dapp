{
  "address": "0x340632f0199C4f9C073f493bddd2873Db0B5806C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "winnerName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winnerAddress",
          "type": "address"
        }
      ],
      "name": "ArchivePastElection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "RegisterCandidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationEndPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingEndPeriod",
          "type": "uint256"
        }
      ],
      "name": "StartElection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "electionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "name": "VoteForCandidate",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "address",
          "name": "candidateAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroyContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "electionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiveResults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerResults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_winningCandidate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isOver",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "registerCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredCandidates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationEndPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registrationEndPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingEndPeriod",
          "type": "uint256"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_registrationEndPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingEndPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        }
      ],
      "name": "voteForCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "candidateIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEndPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c97f3da2cf27dacf086c7e1dbdb71026e8873db43aeae961dc167d78d1157ea",
  "receipt": {
    "to": null,
    "from": "0xaE1c976A25c6D0DcCb5F1a7a9CDF81e518B27942",
    "contractAddress": "0x340632f0199C4f9C073f493bddd2873Db0B5806C",
    "transactionIndex": 5,
    "gasUsed": "1386648",
    "logsBloom": "0x
    "blockHash": "0xc36299d89368eac8f33abfd1398be212cf064f02c2faa0a2b50f18ebab32265b",
    "transactionHash": "0x0c97f3da2cf27dacf086c7e1dbdb71026e8873db43aeae961dc167d78d1157ea",
    "logs": [],
    "blockNumber": 8685074,
    "cumulativeGasUsed": "1943711",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d18dbe9168ba6ae039e1cfdfb6388a7f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winnerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"}],\"name\":\"ArchivePastElection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RegisterCandidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationEndPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingEndPeriod\",\"type\":\"uint256\"}],\"name\":\"StartElection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"electionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"candidateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"name\":\"VoteForCandidate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"candidateAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"electionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiveResults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningCandidate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOver\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredCandidates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationEndPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEndPeriod\",\"type\":\"uint256\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationEndPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingEndPeriod\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"candidateIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEndPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLiveResults()\":{\"details\":\"getLiveResults a view function to see the current results active election.\"},\"getWinnerResults()\":{\"details\":\"getWinnerResults a view function to see who the winner of the active election is.\"},\"registerCandidate(string)\":{\"details\":\"registerCandidate allows anyone to sign up as a candidate in an active election.\"},\"startElection(uint256,uint256)\":{\"details\":\"startElection start a new election passing in a _registrationEndPeriod and a _votingEndPeriod. This also allows starting a new election if the conditions allow it.\"},\"voteForCandidate(uint256)\":{\"details\":\"voteForCandidate allows anyone to vote for a candidate in the current active election.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Voting.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract Voting {\\n    struct Candidate {\\n        address candidateAddress;\\n        uint256 voteCount;\\n        string name;\\n    }\\n    struct Voter {\\n        bool voted;\\n        uint256 candidateIndex;\\n    }\\n\\n    uint256 public electionId;\\n    uint256 public registrationEndPeriod;\\n    uint256 public votingEndPeriod;\\n    bool public locked;\\n    address private owner;\\n\\n    Candidate[] public candidates;\\n    mapping(address => mapping(uint256 => bool)) public registeredCandidates;\\n    mapping(address => mapping(uint256 => Voter)) public voters;\\n\\n    event StartElection(\\n        uint256 indexed electionId,\\n        uint256 registrationEndPeriod,\\n        uint256 votingEndPeriod\\n    );\\n    event ArchivePastElection(\\n        uint256 indexed electionId,\\n        string winnerName,\\n        uint256 voteCount,\\n        address winnerAddress\\n    );\\n    event RegisterCandidate(\\n        uint256 indexed electionId,\\n        uint256 candidateId,\\n        string name\\n    );\\n    event VoteForCandidate(\\n        uint256 indexed electionId,\\n        uint256 candidateId,\\n        uint256 voteCount\\n    );\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No reentrancy\\\");\\n\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev startElection start a new election passing in a _registrationEndPeriod\\n     * and a _votingEndPeriod. This also allows starting a new election if the\\n     * conditions allow it.\\n     */\\n    function startElection(\\n        uint256 _registrationEndPeriod,\\n        uint256 _votingEndPeriod\\n    ) external {\\n        require(\\n            _registrationEndPeriod >= block.timestamp &&\\n                _votingEndPeriod >= _registrationEndPeriod,\\n            \\\"Registration end period must be > voting end period > registration end period.\\\"\\n        );\\n        bool hasElectionEnded =\\n            (registrationEndPeriod == 0 && votingEndPeriod == 0) ||\\n                block.timestamp > votingEndPeriod;\\n        require(\\n            hasElectionEnded,\\n            \\\"There is an active election currently, please wait until it is over.\\\"\\n        );\\n\\n        // start a new election\\n        if (registrationEndPeriod != 0 || votingEndPeriod != 0) {\\n            (string memory name, uint256 voteCount, address winnerAddress) =\\n                winningCandidateDetails();\\n            emit ArchivePastElection(\\n                electionId,\\n                name,\\n                voteCount,\\n                winnerAddress\\n            );\\n            delete candidates;\\n            electionId++;\\n        }\\n\\n        registrationEndPeriod = _registrationEndPeriod;\\n        votingEndPeriod = _votingEndPeriod;\\n\\n        emit StartElection(\\n            electionId,\\n            _registrationEndPeriod,\\n            _votingEndPeriod\\n        );\\n    }\\n\\n    function updateTime(uint256 _registrationEndPeriod, uint256 _votingEndPeriod) external {\\n        require(_registrationEndPeriod < _votingEndPeriod);\\n        registrationEndPeriod = _registrationEndPeriod;\\n        votingEndPeriod = _votingEndPeriod;\\n    }\\n\\n    /**\\n     * @dev registerCandidate allows anyone to sign up as a candidate in an\\n     * active election.\\n     */\\n    function registerCandidate(string memory _name) external {\\n        require(\\n            registrationEndPeriod != 0,\\n            \\\"There are no elections currently.\\\"\\n        );\\n        require(\\n            getKeccak(_name) != getKeccak(\\\"\\\"),\\n            \\\"Please register with a name.\\\"\\n        );\\n        require(\\n            block.timestamp < registrationEndPeriod,\\n            \\\"The registration period has ended.\\\"\\n        );\\n        require(\\n            registeredCandidates[msg.sender][electionId] == false,\\n            \\\"You have already registered for an election.\\\"\\n        );\\n        registeredCandidates[msg.sender][electionId] = true;\\n        candidates.push(Candidate(msg.sender, 0, _name));\\n\\n        emit RegisterCandidate(electionId, candidates.length - 1, _name);\\n    }\\n\\n    /**\\n     * @dev voteForCandidate allows anyone to vote for a candidate in the current\\n     * active election.\\n     */\\n    function voteForCandidate(uint256 _candidateId) external noReentrancy {\\n        require(\\n            !voters[msg.sender][electionId].voted,\\n            \\\"You have already voted for a candidate.\\\"\\n        );\\n        require(\\n            candidates.length >= _candidateId + 1,\\n            \\\"This candidate doesn't exist.\\\"\\n        );\\n        require(\\n            block.timestamp > registrationEndPeriod &&\\n                block.timestamp < votingEndPeriod,\\n            \\\"Voting is not allowed now.\\\"\\n        );\\n        candidates[_candidateId].voteCount++;\\n        voters[msg.sender][electionId].voted = true;\\n        voters[msg.sender][electionId].candidateIndex = _candidateId;\\n\\n        emit VoteForCandidate(\\n            electionId,\\n            _candidateId,\\n            candidates[_candidateId].voteCount\\n        );\\n    }\\n\\n    /**\\n     * @dev getLiveResults a view function to see the current results\\n     * active election.\\n     */\\n    function getLiveResults()\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        address[] memory addresses = new address[](candidates.length);\\n        uint256[] memory voteCounts = new uint256[](candidates.length);\\n\\n        for (uint256 i = 0; i < candidates.length; i++) {\\n            addresses[i] = candidates[i].candidateAddress;\\n            voteCounts[i] = candidates[i].voteCount;\\n        }\\n        return (addresses, voteCounts, votingEndPeriod);\\n    }\\n\\n    /**\\n     * @dev getWinnerResults a view function to see who the winner of the\\n     * active election is.\\n     */\\n    function getWinnerResults()\\n        public\\n        view\\n        returns (uint256 _winningCandidate, bool isOver)\\n    {\\n        uint256 winningCount = 0;\\n        isOver = block.timestamp > votingEndPeriod;\\n\\n        for (uint256 i = 0; i < candidates.length; i++) {\\n            if (candidates[i].voteCount > winningCount) {\\n                winningCount = candidates[i].voteCount;\\n                _winningCandidate = i;\\n            }\\n        }\\n    }\\n\\n    function destroyContract() public {\\n        require(msg.sender == owner);\\n        selfdestruct(msg.sender);\\n    }\\n\\n    /**\\n     * @dev winningCandidateDetails an internal view function to get the details of the\\n     * winning candidate.\\n     */\\n    function winningCandidateDetails()\\n        internal\\n        view\\n        returns (\\n            string memory _name,\\n            uint256 _voteCount,\\n            address _address\\n        )\\n    {\\n        (uint256 winningCandidate, ) = getWinnerResults();\\n        return (\\n            candidates[winningCandidate].name,\\n            candidates[winningCandidate].voteCount,\\n            candidates[winningCandidate].candidateAddress\\n        );\\n    }\\n\\n    function getKeccak(string memory _string) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_string));\\n    }\\n}\\n\",\"keccak256\":\"0x0ab709c1b8d1cfc8bb1274a525a4721c10281c760a8e1ff5069309c0677d0b35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506117c7806100616000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806336c8c5ee1161008c578063a8a7e56111610066578063a8a7e56114610472578063aeb6ceaf146104d6578063cf309012146104fd578063fe1762a11461051d576100ea565b806336c8c5ee1461031e5780635c134d661461034c5780639eb88db6146103b7576100ea565b80630c54b463116100c85780630c54b4631461013557806321f1b6771461016d57806325bbc788146101a55780633477ee2e14610253576100ea565b8063051364d4146100ef578063092a5cce1461010d578063095359ee14610117575b600080fd5b6100f761053b565b6040518082815260200191505060405180910390f35b610115610541565b005b61011f6105b4565b6040518082815260200191505060405180910390f35b61016b6004803603604081101561014b57600080fd5b8101908080359060200190929190803590602001909291905050506105ba565b005b6101a36004803603604081101561018357600080fd5b810190808035906020019092919080359060200190929190505050610802565b005b6101ad610820565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156101fa5780820151818401526020810190506101df565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561023c578082015181840152602081019050610221565b505050509050019550505050505060405180910390f35b61027f6004803603602081101561026957600080fd5b81019080803590602001909291905050506109b1565b604051808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102e15780820151818401526020810190506102c6565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b61034a6004803603602081101561033457600080fd5b8101908080359060200190929190505050610aa0565b005b6103986004803603604081101561036257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e6a565b6040518083151581526020018281526020019250505060405180910390f35b610470600480360360208110156103cd57600080fd5b81019080803590602001906401000000008111156103ea57600080fd5b8201836020820111156103fc57600080fd5b8035906020019184600183028401116401000000008311171561041e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ea8565b005b6104be6004803603604081101561048857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611297565b60405180821515815260200191505060405180910390f35b6104de6112c6565b6040518083815260200182151581526020019250505060405180910390f35b610505611340565b60405180821515815260200191505060405180910390f35b610525611353565b6040518082815260200191505060405180910390f35b60005481565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059b57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60015481565b4282101580156105ca5750818110155b61061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e815260200180611718604e913960600191505060405180910390fd5b60008060015414801561063457506000600254145b80610640575060025442115b905080610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018061166a6044913960600191505060405180910390fd5b60006001541415806106ad5750600060025414155b156107ad5760606000806106bf611359565b9250925092506000547f179aafeb825f68d69526d7c06b5726fce985348b582ae8803c85c0155851516784848460405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561074e578082015181840152602081019050610733565b50505050905090810190601f16801561077b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a260046000610798919061150a565b60008081548092919060010191905055505050505b82600181905550816002819055506000547f63fa1d9adf5b5952a2074d32715d99d20a12a2a73ae84a6e002b0e3b09ecd7378484604051808381526020018281526020019250505060405180910390a2505050565b80821061080e57600080fd5b81600181905550806002819055505050565b6060806000606060048054905067ffffffffffffffff8111801561084357600080fd5b506040519080825280602002602001820160405280156108725781602001602082028036833780820191505090505b509050606060048054905067ffffffffffffffff8111801561089357600080fd5b506040519080825280602002602001820160405280156108c25781602001602082028036833780820191505090505b50905060005b60048054905081101561099e57600481815481106108e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683828151811061092057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506004818154811061096757fe5b90600052602060002090600302016001015482828151811061098557fe5b60200260200101818152505080806001019150506108c8565b5081816002549450945094505050909192565b600481815481106109be57fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b5050505050905083565b600360009054906101000a900460ff1615610b23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f207265656e7472616e63790000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600360006101000a81548160ff021916908315150217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160009054906101000a900460ff1615610bf6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806116ae6027913960400191505060405180910390fd5b600181016004805490501015610c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f546869732063616e64696461746520646f65736e27742065786973742e00000081525060200191505060405180910390fd5b60015442118015610c86575060025442105b610cf8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74696e67206973206e6f7420616c6c6f776564206e6f772e00000000000081525060200191505060405180910390fd5b60048181548110610d0557fe5b9060005260206000209060030201600101600081548092919060010191905055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080548152602001908152602001600020600101819055506000547f0fcec957040941c42fb0bfe6f89b3c4a1bceff73343aaa8ee2f3f6d705a839398260048481548110610e1e57fe5b906000526020600020906003020160010154604051808381526020018281526020019250505060405180910390a26000600360006101000a81548160ff02191690831515021790555050565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060010154905082565b60006001541415610f04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806116f76021913960400191505060405180910390fd5b610f1c6040518060200160405280600081525061148f565b610f258261148f565b1415610f99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f506c6561736520726567697374657220776974682061206e616d652e0000000081525060200191505060405180910390fd5b6001544210610ff3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116d56022913960400191505060405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060009054906101000a900460ff161515146110ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611766602c913960400191505060405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060006101000a81548160ff021916908315150217905550600460405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906111e292919061152e565b5050506000547f703328e7bef019ce4b999a9da56cb108445579b2a05291b56805ec067560215d600160048054905003836040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561125957808201518184015260208101905061123e565b50505050905090810190601f1680156112865780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060006002544211915060005b60048054905081101561133a5781600482815481106112f057fe5b906000526020600020906003020160010154111561132d576004818154811061131557fe5b90600052602060002090600302016001015491508093505b80806001019150506112d5565b50509091565b600360009054906101000a900460ff1681565b60025481565b606060008060006113686112c6565b5090506004818154811061137857fe5b90600052602060002090600302016002016004828154811061139657fe5b906000526020600020906003020160010154600483815481106113b557fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561147c5780601f106114515761010080835404028352916020019161147c565b820191906000526020600020905b81548152906001019060200180831161145f57829003601f168201915b5050505050925093509350935050909192565b6000816040516020018082805190602001908083835b602083106114c857805182526020820191506020810190506020830392506114a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b508054600082556003029060005260206000209081019061152b91906115ae565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061156f57805160ff191683800117855561159d565b8280016001018555821561159d579182015b8281111561159c578251825591602001919060010190611581565b5b5090506115aa9190611604565b5090565b5b8082111561160057600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006115f79190611621565b506003016115af565b5090565b5b8082111561161d576000816000905550600101611605565b5090565b50805460018160011615610100020316600290046000825580601f106116475750611666565b601f0160209004906000526020600020908101906116659190611604565b5b5056fe546865726520697320616e2061637469766520656c656374696f6e2063757272656e746c792c20706c65617365207761697420756e74696c206974206973206f7665722e596f75206861766520616c726561647920766f74656420666f7220612063616e6469646174652e54686520726567697374726174696f6e20706572696f642068617320656e6465642e546865726520617265206e6f20656c656374696f6e732063757272656e746c792e526567697374726174696f6e20656e6420706572696f64206d757374206265203e20766f74696e6720656e6420706572696f64203e20726567697374726174696f6e20656e6420706572696f642e596f75206861766520616c7265616479207265676973746572656420666f7220616e20656c656374696f6e2ea2646970667358221220f69594487045efbe9c2a6d63e94dbe5dc6bda2a11796a779c53afb5831c6700364736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806336c8c5ee1161008c578063a8a7e56111610066578063a8a7e56114610472578063aeb6ceaf146104d6578063cf309012146104fd578063fe1762a11461051d576100ea565b806336c8c5ee1461031e5780635c134d661461034c5780639eb88db6146103b7576100ea565b80630c54b463116100c85780630c54b4631461013557806321f1b6771461016d57806325bbc788146101a55780633477ee2e14610253576100ea565b8063051364d4146100ef578063092a5cce1461010d578063095359ee14610117575b600080fd5b6100f761053b565b6040518082815260200191505060405180910390f35b610115610541565b005b61011f6105b4565b6040518082815260200191505060405180910390f35b61016b6004803603604081101561014b57600080fd5b8101908080359060200190929190803590602001909291905050506105ba565b005b6101a36004803603604081101561018357600080fd5b810190808035906020019092919080359060200190929190505050610802565b005b6101ad610820565b604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156101fa5780820151818401526020810190506101df565b50505050905001838103825285818151815260200191508051906020019060200280838360005b8381101561023c578082015181840152602081019050610221565b505050509050019550505050505060405180910390f35b61027f6004803603602081101561026957600080fd5b81019080803590602001909291905050506109b1565b604051808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102e15780820151818401526020810190506102c6565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b61034a6004803603602081101561033457600080fd5b8101908080359060200190929190505050610aa0565b005b6103986004803603604081101561036257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e6a565b6040518083151581526020018281526020019250505060405180910390f35b610470600480360360208110156103cd57600080fd5b81019080803590602001906401000000008111156103ea57600080fd5b8201836020820111156103fc57600080fd5b8035906020019184600183028401116401000000008311171561041e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610ea8565b005b6104be6004803603604081101561048857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611297565b60405180821515815260200191505060405180910390f35b6104de6112c6565b6040518083815260200182151581526020019250505060405180910390f35b610505611340565b60405180821515815260200191505060405180910390f35b610525611353565b6040518082815260200191505060405180910390f35b60005481565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059b57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60015481565b4282101580156105ca5750818110155b61061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604e815260200180611718604e913960600191505060405180910390fd5b60008060015414801561063457506000600254145b80610640575060025442115b905080610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604481526020018061166a6044913960600191505060405180910390fd5b60006001541415806106ad5750600060025414155b156107ad5760606000806106bf611359565b9250925092506000547f179aafeb825f68d69526d7c06b5726fce985348b582ae8803c85c0155851516784848460405180806020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561074e578082015181840152602081019050610733565b50505050905090810190601f16801561077b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a260046000610798919061150a565b60008081548092919060010191905055505050505b82600181905550816002819055506000547f63fa1d9adf5b5952a2074d32715d99d20a12a2a73ae84a6e002b0e3b09ecd7378484604051808381526020018281526020019250505060405180910390a2505050565b80821061080e57600080fd5b81600181905550806002819055505050565b6060806000606060048054905067ffffffffffffffff8111801561084357600080fd5b506040519080825280602002602001820160405280156108725781602001602082028036833780820191505090505b509050606060048054905067ffffffffffffffff8111801561089357600080fd5b506040519080825280602002602001820160405280156108c25781602001602082028036833780820191505090505b50905060005b60048054905081101561099e57600481815481106108e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683828151811061092057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506004818154811061096757fe5b90600052602060002090600302016001015482828151811061098557fe5b60200260200101818152505080806001019150506108c8565b5081816002549450945094505050909192565b600481815481106109be57fe5b90600052602060002090600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b5050505050905083565b600360009054906101000a900460ff1615610b23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4e6f207265656e7472616e63790000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600360006101000a81548160ff021916908315150217905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160009054906101000a900460ff1615610bf6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806116ae6027913960400191505060405180910390fd5b600181016004805490501015610c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f546869732063616e64696461746520646f65736e27742065786973742e00000081525060200191505060405180910390fd5b60015442118015610c86575060025442105b610cf8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f566f74696e67206973206e6f7420616c6c6f776564206e6f772e00000000000081525060200191505060405180910390fd5b60048181548110610d0557fe5b9060005260206000209060030201600101600081548092919060010191905055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060000160006101000a81548160ff02191690831515021790555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080548152602001908152602001600020600101819055506000547f0fcec957040941c42fb0bfe6f89b3c4a1bceff73343aaa8ee2f3f6d705a839398260048481548110610e1e57fe5b906000526020600020906003020160010154604051808381526020018281526020019250505060405180910390a26000600360006101000a81548160ff02191690831515021790555050565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060010154905082565b60006001541415610f04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806116f76021913960400191505060405180910390fd5b610f1c6040518060200160405280600081525061148f565b610f258261148f565b1415610f99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f506c6561736520726567697374657220776974682061206e616d652e0000000081525060200191505060405180910390fd5b6001544210610ff3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806116d56022913960400191505060405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060009054906101000a900460ff161515146110ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180611766602c913960400191505060405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008054815260200190815260200160002060006101000a81548160ff021916908315150217905550600460405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906111e292919061152e565b5050506000547f703328e7bef019ce4b999a9da56cb108445579b2a05291b56805ec067560215d600160048054905003836040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561125957808201518184015260208101905061123e565b50505050905090810190601f1680156112865780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060006002544211915060005b60048054905081101561133a5781600482815481106112f057fe5b906000526020600020906003020160010154111561132d576004818154811061131557fe5b90600052602060002090600302016001015491508093505b80806001019150506112d5565b50509091565b600360009054906101000a900460ff1681565b60025481565b606060008060006113686112c6565b5090506004818154811061137857fe5b90600052602060002090600302016002016004828154811061139657fe5b906000526020600020906003020160010154600483815481106113b557fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561147c5780601f106114515761010080835404028352916020019161147c565b820191906000526020600020905b81548152906001019060200180831161145f57829003601f168201915b5050505050925093509350935050909192565b6000816040516020018082805190602001908083835b602083106114c857805182526020820191506020810190506020830392506114a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b508054600082556003029060005260206000209081019061152b91906115ae565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061156f57805160ff191683800117855561159d565b8280016001018555821561159d579182015b8281111561159c578251825591602001919060010190611581565b5b5090506115aa9190611604565b5090565b5b8082111561160057600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006115f79190611621565b506003016115af565b5090565b5b8082111561161d576000816000905550600101611605565b5090565b50805460018160011615610100020316600290046000825580601f106116475750611666565b601f0160209004906000526020600020908101906116659190611604565b5b5056fe546865726520697320616e2061637469766520656c656374696f6e2063757272656e746c792c20706c65617365207761697420756e74696c206974206973206f7665722e596f75206861766520616c726561647920766f74656420666f7220612063616e6469646174652e54686520726567697374726174696f6e20706572696f642068617320656e6465642e546865726520617265206e6f20656c656374696f6e732063757272656e746c792e526567697374726174696f6e20656e6420706572696f64206d757374206265203e20766f74696e6720656e6420706572696f64203e20726567697374726174696f6e20656e6420706572696f642e596f75206861766520616c7265616479207265676973746572656420666f7220616e20656c656374696f6e2ea2646970667358221220f69594487045efbe9c2a6d63e94dbe5dc6bda2a11796a779c53afb5831c6700364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLiveResults()": {
        "details": "getLiveResults a view function to see the current results active election."
      },
      "getWinnerResults()": {
        "details": "getWinnerResults a view function to see who the winner of the active election is."
      },
      "registerCandidate(string)": {
        "details": "registerCandidate allows anyone to sign up as a candidate in an active election."
      },
      "startElection(uint256,uint256)": {
        "details": "startElection start a new election passing in a _registrationEndPeriod and a _votingEndPeriod. This also allows starting a new election if the conditions allow it."
      },
      "voteForCandidate(uint256)": {
        "details": "voteForCandidate allows anyone to vote for a candidate in the current active election."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/Voting.sol:Voting",
        "label": "electionId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17,
        "contract": "contracts/Voting.sol:Voting",
        "label": "registrationEndPeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 19,
        "contract": "contracts/Voting.sol:Voting",
        "label": "votingEndPeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21,
        "contract": "contracts/Voting.sol:Voting",
        "label": "locked",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 23,
        "contract": "contracts/Voting.sol:Voting",
        "label": "owner",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 26,
        "contract": "contracts/Voting.sol:Voting",
        "label": "candidates",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Candidate)8_storage)dyn_storage"
      },
      {
        "astId": 32,
        "contract": "contracts/Voting.sol:Voting",
        "label": "registeredCandidates",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 38,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voter)13_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Candidate)8_storage)dyn_storage": {
        "base": "t_struct(Candidate)8_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Candidate[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Voter)13_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Voting.Voter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Voter)13_storage)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Voter)13_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)13_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)8_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Candidate",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/Voting.sol:Voting",
            "label": "candidateAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7,
            "contract": "contracts/Voting.sol:Voting",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Voter)13_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12,
            "contract": "contracts/Voting.sol:Voting",
            "label": "candidateIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}